classdef tester_besselCrossPrimeZeros < matlab.unittest.TestCase
    % Unit tests for "besselCrossPrimeZeros" function.
    %
    % Author: Matt Dvorsky

    properties
        tolVal = 1e-13;

        v0 = repmat([0, 1, 2, 10, 100, 0.5, 1000, 10000], 1, 7);
        lam0 = repelem([1.001, 1.01, 1.1, 2, 10, 100, 1000], 8);

        k0 = [...
            3141.592772836916, ...
            0.9995002914792559, ...
            1.999000582958637, ...
            9.995002914776325, ...
            99.9500291313048, ...
            0.4997501457397638, ...
            999.500274854231, ...
            9994.986290266355, ...
            314.1604471826088, ...
            0.995028980298321, ...
            1.990057959621233, ...
            9.950289642043028, ...
            99.50273548103129, ...
            0.4975144902101103, ...
            994.8669260223442, ...
            9918.24204586304, ...
            31.42676116865277, ...
            0.9527399982216372, ...
            1.905472143654136, ...
            9.526104729378602, ...
            94.18814133751701, ...
            0.4763704899165207, ...
            916.4485121091556, ...
            9106.749522148433, ...
            3.196578380810635, ...
            0.6773360051365841, ...
            1.340602143334421, ...
            5.884428681117287, ...
            51.88418884127113, ...
            0.3395816019324179, ...
            504.0466816600356, ...
            5008.712237181639, ...
            0.3940941610212604, ...
            0.1803470084805394, ...
            0.3052940899733282, ...
            1.177087667495558, ...
            10.37683776825423, ...
            0.1014000319207577, ...
            100.8093363320071, ...
            1001.742447436328, ...
            0.03832884172773481, ...
            0.0184079803753899, ...
            0.03054236796532232, ...
            0.1177087667495558, ...
            1.037683776825423, ...
            0.01148804533557441, ...
            10.08093363320071, ...
            100.1742447436328, ...
            0.00383171778029093, ...
            0.001841179924525494, ...
            0.003054236928213969, ...
            0.01177087667495558, ...
            0.1037683776825423, ...
            0.001163871425339692, ...
            1.008093363320071, ...
            10.01742447436328];
    end

    methods (Test)
        %% Basic Functionality Tests
        function test_firstZero(testCase)
            v = testCase.v0(:);
            lam = testCase.lam0(:);

            [k0Actual, t0Actual] = besselCrossPrimeZeros(v, lam, 1);
            k0Exp = testCase.k0(:);

            testCase.verifyEqual(k0Actual, k0Exp, ...
                RelTol=testCase.tolVal, AbsTol=testCase.tolVal);

            % Verify that they are zeros at k0Actual.
            kpvn1 = besselCylinderPrime(v, t0Actual, k0Actual);
            testCase.verifyEqual(kpvn1, 0*v, ...
                AbsTol=testCase.tolVal);

            % Verify that they are zeros at lam.*k0Actual.
            kpvn2 = besselCylinderPrime(v, t0Actual, lam.*k0Actual);
            testCase.verifyEqual(kpvn2, 0*v, ...
                AbsTol=testCase.tolVal);
        end

        function test_besselCylinderPrimeSign(testCase)
            v = testCase.v0(:);
            lam = testCase.lam0(:);
            n(1, :) = 1:5;

            [k, t] = besselCrossPrimeZeros(v, lam, n);

            % We want to test whether the derivative of
            % "besselCylinderPrime" is negative at "k", but for high
            % orders, we can't test directly. Instead, we can check at
            % "k.*lam" to see whether the derivative at "k" is negative.
            besVal = besselCylinder(v, t, k.*lam) .* (-1).^(n + (v==0));

            testCase.verifyLessThan(besVal, 0, ...
                "Derivative should be negative at first zero.");
        end

        %% Assert Interleaving Property of Bessel Function Zeros
        function test_compare_kpvn_interleaving(testCase)
            n(:, 1) = 1:1000;
            for ii = 1:numel(testCase.v0)
                v = testCase.v0(ii);
                lam = testCase.lam0(ii);

                if lam < 1.005
                    continue;
                end

                kpvn = besselCrossPrimeZeros(v, lam, n);
                kpvPlus1n = besselCrossPrimeZeros(v + 1, lam, n);

                if v == 0       % Zeroth order has a jump
                    zerosInOrder = reshape([kpvPlus1n, kpvn].', [], 1);
                else
                    zerosInOrder = reshape([kpvn, kpvPlus1n].', [], 1);
                end

                testCase.verifyReturnsTrue(@() issorted(zerosInOrder), ...
                    sprintf("Bessel function zeros with " + ...
                    "(v = %g, lam = %g) must interlace properly.", ...
                    v, lam));
            end
        end

        %% Broadcasting Tests
        function test_broadcasting1(testCase)
            v = rand(10, 1);
            lam = 2 + rand(10, 5);
            n = round(10*rand(1, 5)) + 1;

            kpvn = besselCrossPrimeZeros(v, lam, n);
            testCase.verifySize(kpvn, [numel(v), numel(n)]);
        end

        function test_broadcasting2(testCase)
            v = rand(3, 1, 4);
            lam = 2 + rand(3, 1, 1);
            n = round(10*rand(1, 5, 4)) + 1;

            kpvn = besselCrossPrimeZeros(v, lam, n);
            testCase.verifySize(kpvn, [3, 5, 4]);
        end

        %% Error Condition Tests
        function testError_broadcastingMismatch(testCase)
            v = rand(10, 1);
            lam = 2 + rand(10, 5);
            n = round(10*rand(9, 5)) + 1;

            testCase.verifyError(@() besselCrossPrimeZeros(v, lam, n), ...
                "MATLAB:sizeDimensionsMustMatch");
        end

        function testError_nonPositiveN(testCase)
            testCase.verifyError(@() besselCrossPrimeZeros(0, 2, 0), ...
                "MATLAB:validators:mustBePositive");
            testCase.verifyError(@() besselCrossPrimeZeros(0, 2, -1), ...
                "MATLAB:validators:mustBePositive");
        end

        function testError_nonIntegerN(testCase)
            testCase.verifyError(...
                @() besselCrossPrimeZeros(0, 2, 1.5), ...
                "MATLAB:validators:mustBeInteger");
        end

        function testError_negativeNu(testCase)
            testCase.verifyError(...
                @() besselCrossPrimeZeros(-0.1, 2, 1), ...
                "MATLAB:validators:mustBeNonnegative");
        end

        function testError_nonfiniteNu(testCase)
            testCase.verifyError(...
                @() besselCrossPrimeZeros(inf, 2, 1), ...
                "MATLAB:validators:mustBeFinite");
        end
    end
end