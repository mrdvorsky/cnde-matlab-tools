classdef tester_besselCrossZeros < matlab.unittest.TestCase
    % Unit tests for "besselCrossZeros" function.
    %
    % Author: Matt Dvorsky

    properties
        tolVal = 1e-13;

        v0 = repmat([0, 1, 2, 10, 100, 0.5, 1000, 10000], 1, 7);
        lam0 = repelem([1.001, 1.01, 1.1, 2, 10, 100, 1000], 8);

        k0 = [...
            3141.59261384104, ...
            3141.592772836954, ...
            3141.593249825487, ...
            3141.608513393977, ...
            3143.182170955517, ...
            3141.592653590287, ...
            3296.75673871858, ...
            10477.1009885678, ...
            314.1588714167846, ...
            314.1604471826128, ...
            314.1651744326613, ...
            314.3164088948993, ...
            329.5400329925349, ...
            314.1592653589811, ...
            1043.425759882545, ...
            9940.62373070045, ...
            31.41231415988432, ...
            31.42676116865283, ...
            31.47006233908752, ...
            32.82550678789575, ...
            100.1630505461768, ...
            31.41592653589789, ...
            926.0553463344618, ...
            9127.299116816832, ...
            3.123030919595692, ...
            3.196578380810636, ...
            3.406921426567525, ...
            7.251184939335678, ...
            54.41808294920488, ...
            3.141592653589793, ...
            509.330440483954, ...
            5020.014514249258, ...
            0.3313938715053228, ...
            0.3940941610212603, ...
            0.5142348102980752, ...
            1.447550068655455, ...
            10.88361658984098, ...
            0.3490658503988655, ...
            101.8660880967908, ...
            1004.002902849852, ...
            0.02800921755144992, ...
            0.03832884172773481, ...
            0.0513562303494517, ...
            0.1447550068655454, ...
            1.088361658984098, ...
            0.03173325912716963, ...
            10.18660880967908, ...
            100.4002902849852, ...
            0.002654814167942973, ...
            0.003831717780290929, ...
            0.005135622301914057, ...
            0.01447550068655454, ...
            0.1088361658984098, ...
            0.003144737390980774, ...
            1.018660880967908, ...
            10.04002902849852];
    end

    methods (Test)
        %% Basic Functionality Tests
        function test_firstZero(testCase)
            v = testCase.v0(:);
            lam = testCase.lam0(:);

            [k0Actual, t0Actual] = besselCrossZeros(v, lam, 1);
            k0Exp = testCase.k0(:);

            testCase.verifyEqual(k0Actual, k0Exp, ...
                RelTol=testCase.tolVal, AbsTol=testCase.tolVal);

            % Verify that they are zeros at k0Actual.
            kvn1 = besselCylinder(v, t0Actual, k0Actual);
            testCase.verifyEqual(kvn1, 0*v, ...
                AbsTol=testCase.tolVal);

            % Verify that they are zeros at lam.*k0Actual.
            kvn2 = besselCylinder(v, t0Actual, lam.*k0Actual);
            testCase.verifyEqual(kvn2, 0*v, ...
                AbsTol=testCase.tolVal);
        end

        function test_besselCylinderSign(testCase)
            v = testCase.v0(:);
            lam = testCase.lam0(:);
            n(1, :) = 1:5;

            [k, t] = besselCrossZeros(v, lam, n);

            % We want to test whether the derivative of besselCylinder is
            % positive at "k", but for high orders, we can't test
            % directly. Instead, we can check at "k.*lam" to see whether
            % the derivative at "k" is positive.
            besVal = besselCylinderPrime(v, t, k.*lam) .* (-1).^n;

            testCase.verifyGreaterThan(besVal, 0, ...
                "Derivative should be positive at first zero.");
        end

        %% Assert Interleaving Property of Bessel Function Zeros
        function test_compare_kvn_interleaving(testCase)
            n(:, 1) = 1:1000;
            for ii = 1:numel(testCase.v0)
                v = testCase.v0(ii);
                lam = testCase.lam0(ii);

                if lam < 1.005
                    continue;
                end

                kvn = besselCrossZeros(v, lam, n);
                kvPlus1n = besselCrossZeros(v + 1, lam, n);

                zerosInOrder = reshape([kvn, kvPlus1n].', [], 1);
                testCase.verifyReturnsTrue(@() issorted(zerosInOrder), ...
                    sprintf("Bessel function zeros with " + ...
                    "(v = %g, lam = %g) must interlace properly.", ...
                    v, lam));
            end
        end

        %% Broadcasting Tests
        function test_broadcasting1(testCase)
            v = rand(10, 1);
            lam = 2 + rand(10, 5);
            n = round(10*rand(1, 5)) + 1;

            kvn = besselCrossZeros(v, lam, n);
            testCase.verifySize(kvn, [numel(v), numel(n)]);
        end

        function test_broadcasting2(testCase)
            v = rand(3, 1, 4);
            lam = 2 + rand(3, 1, 1);
            n = round(10*rand(1, 5, 4)) + 1;

            kvn = besselCrossZeros(v, lam, n);
            testCase.verifySize(kvn, [3, 5, 4]);
        end

        %% Error Condition Tests
        function testError_broadcastingMismatch(testCase)
            v = rand(10, 1);
            lam = 2 + rand(10, 5);
            n = round(10*rand(9, 5)) + 1;

            testCase.verifyError(@() besselCrossZeros(v, lam, n), ...
                "MATLAB:sizeDimensionsMustMatch");
        end

        function testError_nonPositiveN(testCase)
            testCase.verifyError(@() besselCrossZeros(0, 2, 0), ...
                "MATLAB:validators:mustBePositive");
            testCase.verifyError(@() besselCrossZeros(0, 2, -1), ...
                "MATLAB:validators:mustBePositive");
        end

        function testError_nonIntegerN(testCase)
            testCase.verifyError(...
                @() besselCrossZeros(0, 2, 1.5), ...
                "MATLAB:validators:mustBeInteger");
        end

        function testError_negativeNu(testCase)
            testCase.verifyError(...
                @() besselCrossZeros(-0.1, 2, 1), ...
                "MATLAB:validators:mustBeNonnegative");
        end

        function testError_nonfiniteNu(testCase)
            testCase.verifyError(...
                @() besselCrossZeros(inf, 2, 1), ...
                "MATLAB:validators:mustBeFinite");
        end
    end
end