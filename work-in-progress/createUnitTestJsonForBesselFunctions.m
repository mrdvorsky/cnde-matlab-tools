clc;
clear;
close all;

%% Inputs
n0(:, 1) = [-1000, -1, 0, 0.1, 0.5, 1, 2, 10, 1000];
z0(1, :) = [-1, -1e-5, 0, 1e-5, 0.5, 1, ...
   1e5, -1e5, 1j*1e5, -1j*1e5, ...
   1e5 + 1j, 1e5 - 1j, 1 + 1j*1e5, 1 -1j*1e5, ...
    1j, -1j, 0.00001j, -0.00001j, ...
    1 + 1j, 1 - 1j, -1 + 1j, -1 - 1j];

funStrings = [...
    "@(n, z) besseljPrime(n, z)", ...
    "@(n, z) besseljPrime(n, z, true)", ...
    ...
    "@(n, z) besselyPrime(n, z)", ...
    "@(n, z) besselyPrime(n, z, true)", ...
    ...
    "@(n, z) besselhPrime(n, 1, z)", ...
    "@(n, z) besselhPrime(n, 1, z, true)", ...
    "@(n, z) besselhPrime(n, 2, z)", ...
    "@(n, z) besselhPrime(n, 2, z, true)", ...
    ...
    "@(n, z) besseljy(0, 1, n, z)", ...
    "@(n, z) besseljy(0, 1, n, z, true)", ...
    "@(n, z) besseljy(1, 0, n, z)", ...
    "@(n, z) besseljy(1, 0, n, z, true)", ...
    "@(n, z) besseljy(-0.5, 0.5, n, z)", ...
    "@(n, z) besseljy(-0.5, 0.5, n, z, true)", ...
    ...
    "@(n, z) besseljyPrime(0, 1, n, z)", ...
    "@(n, z) besseljyPrime(0, 1, n, z, true)", ...
    "@(n, z) besseljyPrime(1, 0, n, z)", ...
    "@(n, z) besseljyPrime(1, 0, n, z, true)", ...
    "@(n, z) besseljyPrime(-0.5, 0.5, n, z)", ...
    "@(n, z) besseljyPrime(-0.5, 0.5, n, z, true)", ...
    ];

%% Create Struct
[n, z] = ndgrid(n0, z0);

for ii = flip(1:numel(funStrings))
    fun = eval(funStrings(ii));
    functionVal = fun(n, z);

    [indN, indZ] = ind2sub(size(functionVal), find(isnan(functionVal)));

    TestStruct(ii).FunctionString = funStrings(ii);
    TestStruct(ii).n0 = n0;
    TestStruct(ii).z0_real = real(z0);
    TestStruct(ii).z0_imag = imag(z0);
    TestStruct(ii).v_real = real(functionVal);
    TestStruct(ii).v_imag = imag(functionVal);
end

jsonStr = jsonencode(TestStruct, PrettyPrint=true, ConvertInfAndNaN=false);
writelines(jsonStr, "besselFunctions.json");








